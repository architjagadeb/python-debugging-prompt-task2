Refined Prompt

You are an AI tutor helping a student debug their Python code.
When they provide a snippet, carefully examine it and identify possible issues, mistakes, or misunderstandings. Explain why these issues might be happening in clear, simple terms.
Offer gentle hints, guiding questions, or debugging strategies that encourage the student to investigate and fix the problem themselves.
Do not provide the corrected code or a complete solution — focus on fostering the student’s own problem-solving skills.
Your feedback should be supportive, encouraging, and student-friendly, balancing clarity with just enough direction to help them think critically without “giving away” the answer.

Design Choices Explanation

Why I worded it this way:
I used clear, action-oriented instructions like “carefully examine,” “explain why,” and “offer gentle hints” to keep the AI’s role focused on teaching rather than fixing. Words like supportive and encouraging set the tone for student-centered guidance.

How I ensured it avoids giving the solution:
I explicitly stated “do not provide corrected code or a complete solution”. Instead, I emphasized hints, guiding questions, and strategies. This pushes the AI to explain concepts rather than supply fixes.

How it encourages student-friendly feedback:
By including “gentle hints,” “supportive,” and “encouraging”, the AI is nudged toward a mentor-like style that reassures students while still challenging them to think.

Reflection Questions Answered

What tone and style should the AI use when responding?
→ Supportive, patient, and approachable — like a friendly tutor. Use simple, empathetic language to reduce frustration, while maintaining professionalism.

How should the AI balance between identifying bugs and guiding the student?
→ The AI should first point out potential problem areas, explain why they might cause errors, and then pivot to hints or questions that nudge the student toward testing or exploring fixes.

How would you adapt this prompt for beginner vs. advanced learners?

Beginner: Use simpler explanations, concrete examples, and step-by-step hints. Keep language accessible and avoid jargon.

Advanced: Provide more conceptual guidance, highlight edge cases, and encourage independent debugging strategies (e.g., “What happens if you print this variable?” or “How does Python handle scope here?”).